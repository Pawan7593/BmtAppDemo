{"name": "test_verify_flight_booking_with_special_fare_armed_forces", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: \n Element {com.makemytrip:id/tv_final_fare} was not present after 6 seconds!", "trace": "self = <test.test_demo_application.MMT_Application_test testMethod=test_verify_flight_booking_with_special_fare_armed_forces>\nselector = 'com.makemytrip:id/tv_final_fare', attribute = 'text', by = 'id', timeout = 6, hard_fail = True\n\n    def get_attribute(\n            self,\n            selector,\n            attribute,\n            by=MobileBy.ACCESSIBILITY_ID,\n            timeout=None,\n            hard_fail=True,\n    ):\n        \"\"\" This method uses JavaScript to get the value of an attribute. \"\"\"\n        self.__check_scope()\n        if not timeout:\n            timeout = settings.SMALL_TIMEOUT\n        selector, by = self.__recalculate_selector(selector, by)\n        time.sleep(0.01)\n        element = page_actions.wait_for_element_present(\n            self.driver, selector, by, timeout\n        )\n        try:\n>           attribute_value = element.get_attribute(attribute)\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\base_case.py:416: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webelement.WebElement (session=\"790490c7-3aea-47d0-8832-43c1ec030e20\", element=\"c4f08e9e-35cf-488f-951a-db8d576223b7\")>, name = 'text'\n\n    def get_attribute(self, name: str) -> Optional[Union[str, Dict]]:\n        \"\"\"Gets the given attribute or property of the element.\n    \n        Override for Appium\n    \n        This method will first try to return the value of a property with the\n        given name. If a property with that name doesn't exist, it returns the\n        value of the attribute with the same name. If there's no attribute with\n        that name, ``None`` is returned.\n    \n        Values which are considered truthy, that is equals \"true\" or \"false\",\n        are returned as booleans.  All other non-``None`` values are returned\n        as strings.  For attributes or properties which do not exist, ``None``\n        is returned.\n    \n        Args:\n            name: Name of the attribute/property to retrieve.\n    \n        Usage:\n            # Check if the \"active\" CSS class is applied to an element.\n    \n            is_active = \"active\" in target_element.get_attribute(\"class\")\n    \n        Returns:\n            The given attribute or property of the element\n        \"\"\"\n    \n>       resp = self._execute(RemoteCommand.GET_ELEMENT_ATTRIBUTE, {'name': name})\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appium\\webdriver\\webelement.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webelement.WebElement (session=\"790490c7-3aea-47d0-8832-43c1ec030e20\", element=\"c4f08e9e-35cf-488f-951a-db8d576223b7\")>\ncommand = 'getElementAttribute', params = {'id': 'c4f08e9e-35cf-488f-951a-db8d576223b7', 'name': 'text', 'sessionId': '790490c7-3aea-47d0-8832-43c1ec030e20'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"790490c7-3aea-47d0-8832-43c1ec030e20\")>, driver_command = 'getElementAttribute'\nparams = {'id': 'c4f08e9e-35cf-488f-951a-db8d576223b7', 'name': 'text'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001AEE0960C40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"androidx.test.uiautomator.StaleObject...t io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:41)\\\\n\\\\t... 33 more\\\\n\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001AEE0960C40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"androidx.test.uiautomator.StaleObject...t io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:41)\\\\n\\\\t... 33 more\\\\n\"}}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001AEE0960C40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"androidx.test.uiautomator.StaleObject...t io.appium.uiautomator2.handler.request.SafeRequestHandler.handle(SafeRequestHandler.java:41)\\\\n\\\\t... 33 more\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: androidx.test.uiautomator.StaleObjectException\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.test_demo_application.MMT_Application_test testMethod=test_verify_flight_booking_with_special_fare_armed_forces>\n\n    @pytest.mark.all\n    @pytest.mark.success\n    def test_verify_flight_booking_with_special_fare_armed_forces(self):\n        self.enter_phone_number('9818173207')\n        self.click_on_continue_btn()\n        self.login_via_password()\n        self.enter_password('Freedom2022@')\n        self.click_on_submit_btn()\n        self.select_the_language()\n        self.click_on_continue()\n        self.verify_homepage()\n        self.click_on_flight()\n        self.validate_redirection_on_flight_search()\n        self.click_on_from()\n        self.select_city_from_to('Bangkok')\n        self.select_city_from_to('Bengaluru')\n        self.verify_city_name('Bangkok','Bengaluru')\n        self.click_on_departure_date()\n        self.select_date_of_departure()\n        self.click_on_done()\n        self.click_on_traveller()\n        self.increase_child_passenger()\n        self.click_on_done()\n        self.select_special_fare_option()\n        self.click_on_search_flight()\n        self.verify_special_fare_msg()\n        self.click_on_okay()\n        #self.click_on_show_me()\n        self.click_on_got_it()\n>       self.select_flight_compare_fare()\n\ntest\\test_demo_application.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\pages\\flight_search.py:102: in select_flight_compare_fare\n    final_fares = self.get_attribute(final_fare, 'text')\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\base_case.py:419: in get_attribute\n    element = page_actions.wait_for_element_present(\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\page_actions.py:302: in wait_for_element_present\n    timeout_exception(NoSuchElementException, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nexception = <class 'selenium.common.exceptions.NoSuchElementException'>, message = '\\n Element {com.makemytrip:id/tv_final_fare} was not present after 6 seconds!'\n\n    def timeout_exception(exception, message):\n        exception, message = s_utils.format_exc(exception, message)\n>       raise exception(message)\nE       selenium.common.exceptions.NoSuchElementException: Message: \nE        Element {com.makemytrip:id/tv_final_fare} was not present after 6 seconds!\n\nc:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\page_actions.py:161: NoSuchElementException"}, "steps": [{"name": "Entering phone number", "status": "passed", "parameters": [{"name": "phone_number", "value": "'9818173207'"}], "start": 1651636614841, "stop": 1651636647242}, {"name": "Clicking on continue btn", "status": "passed", "start": 1651636647287, "stop": 1651636648437}, {"name": "Clicking on Login via Password", "status": "passed", "start": 1651636648438, "stop": 1651636652735}, {"name": "Entering password", "status": "passed", "parameters": [{"name": "password", "value": "'Freedom2022@'"}], "start": 1651636652735, "stop": 1651636655603}, {"name": "Clicking on submit btn", "status": "passed", "start": 1651636655603, "stop": 1651636656352}, {"name": "Selecting the language", "status": "passed", "start": 1651636656352, "stop": 1651636672970}, {"name": "Clicking on continue", "status": "passed", "start": 1651636672970, "stop": 1651636676653}, {"name": "Verifying homepage", "status": "passed", "start": 1651636676656, "stop": 1651636676732}, {"name": "Clicking on Flights", "status": "passed", "start": 1651636676732, "stop": 1651636680577}, {"name": "Validation redirection after click on flight", "status": "passed", "start": 1651636680579, "stop": 1651636685247}, {"name": "Clicking on from option", "status": "passed", "start": 1651636685248, "stop": 1651636685573}, {"name": "Selecting city", "status": "passed", "parameters": [{"name": "city", "value": "'Bangkok'"}], "start": 1651636685574, "stop": 1651636688973}, {"name": "Selecting city", "status": "passed", "parameters": [{"name": "city", "value": "'Bengaluru'"}], "start": 1651636688973, "stop": 1651636689198}, {"name": "Verifying selected city display correctly", "status": "passed", "parameters": [{"name": "city_from", "value": "'Bangkok'"}, {"name": "city_to", "value": "'Bengaluru'"}], "start": 1651636689199, "stop": 1651636691657}, {"name": "Clicking on departure date", "status": "passed", "start": 1651636691657, "stop": 1651636691932}, {"name": "Selecting date", "status": "passed", "start": 1651636691932, "stop": 1651636700736}, {"name": "Clicking on done after select date", "status": "passed", "start": 1651636700737, "stop": 1651636701630}, {"name": "Clicking on travellers & class", "status": "passed", "start": 1651636701630, "stop": 1651636701798}, {"name": "Increasing one child passenger", "status": "passed", "start": 1651636701798, "stop": 1651636702999}, {"name": "Clicking on done after select date", "status": "passed", "start": 1651636703000, "stop": 1651636703799}, {"name": "Selecting special fare option", "status": "passed", "start": 1651636703800, "stop": 1651636705805}, {"name": "clicking on search flight", "status": "passed", "start": 1651636705806, "stop": 1651636705961}, {"name": "Verifying special fare message", "status": "passed", "start": 1651636705961, "stop": 1651636710045}, {"name": "Clicking on okay", "status": "passed", "start": 1651636710045, "stop": 1651636710150}, {"name": "Clicking on Got it btn", "status": "passed", "start": 1651636710150, "stop": 1651636718636}, {"name": "Selecting flight and compare fare", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: \n Element {com.makemytrip:id/tv_final_fare} was not present after 6 seconds!\n\n", "trace": "  File \"c:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"E:\\BMT_Work\\BmtAppDemo\\src\\pages\\flight_search.py\", line 102, in select_flight_compare_fare\n    final_fares = self.get_attribute(final_fare, 'text')\n  File \"c:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\base_case.py\", line 419, in get_attribute\n    element = page_actions.wait_for_element_present(\n  File \"c:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\page_actions.py\", line 302, in wait_for_element_present\n    timeout_exception(NoSuchElementException, message)\n  File \"c:\\users\\pawan\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\appiumbase\\fixtures\\page_actions.py\", line 161, in timeout_exception\n    raise exception(message)\n"}, "start": 1651636718636, "stop": 1651636733958}], "start": 1651636614841, "stop": 1651636735706, "uuid": "93bf4299-5648-43d1-85c4-fbf16d2ca4d1", "historyId": "613d6cb44d16a67711319702cad17dfa", "testCaseId": "3f4ee9e0e3810a0af2d73f9151beb00b", "fullName": "test.test_demo_application.MMT_Application_test#test_verify_flight_booking_with_special_fare_armed_forces", "labels": [{"name": "tag", "value": "success"}, {"name": "tag", "value": "all"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_demo_application"}, {"name": "subSuite", "value": "MMT_Application_test"}, {"name": "host", "value": "BMT-LAP-105"}, {"name": "thread", "value": "11792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_demo_application"}]}